// Generated by CoffeeScript 1.6.3
(function() {
  var Game, atom, keybindings, util,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  atom = require("../spec/mock/atom_mock.coffee").atom;

  keybindings = require("./keybindings.coffee").keybindings;

  util = require("./util.coffee").util;

  exports.Game = Game = (function(_super) {
    __extends(Game, _super);

    Game.SPEED = 300;

    function Game() {
      Game.__super__.constructor.apply(this, arguments);
      keybindings.configure();
      atom.setDesiredSurfaceArea(500000);
      this._maxTimeDifference = .075;
      this._leftWidth = atom.width / 2;
    }

    Game.prototype.update = function(dt) {
      dt = Math.min(dt, this._maxTimeDifference);
      if (atom.input.down("left")) {
        this._leftWidth -= Game.SPEED * dt;
      }
      if (atom.input.down("right")) {
        this._leftWidth += Game.SPEED * dt;
      }
      return this._leftWidth = util.bound(this._leftWidth, 0, atom.width);
    };

    Game.prototype.draw = function() {
      atom.context.fillStyle = "black";
      atom.context.fillRect(0, 0, atom.width, atom.height);
      atom.context.fillStyle = "white";
      return atom.context.fillRect(0, 0, this._leftWidth, atom.height);
    };

    return Game;

  })(atom.Game);

}).call(this);

/*
//@ sourceMappingURL=game.map
*/
